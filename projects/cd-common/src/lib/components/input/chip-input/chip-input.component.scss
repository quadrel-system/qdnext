/*
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

$chip-height: calc(var(--cd-size-3) + (2 * var(--cd-spacing-0)));
$transitionSpeed: 120ms;

:host {
  display: inline-flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  flex-wrap: wrap;
  overflow: hidden auto;
  min-height: $chip-height;
  height: fit-content;
  box-sizing: border-box;
  border-radius: var(--cd-border-radius-2);
  background: var(--cd-input-background-color);
  padding: 0;
  position: relative;

  &::after {
    opacity: 0;
  }

  &.focus::after {
    content: '';
    position: absolute;
    left: 0;
    right: 0;
    height: 2px;
    bottom: 0;
    opacity: 1;
    transition: $transitionSpeed ease;
    background: var(--cd-primary-color);
    pointer-events: none;
    contain: strict;
  }

  & > * {
    // Flex is used only for vertical centering
    // Set to flex none to prevent stretching of chips
    flex: none;
    margin: var(--cd-spacing-0);
    max-width: calc(100% - (2 * var(--cd-spacing-0)) - (2 * var(--cd-spacing-2)));
  }
}

input.new-chip-input {
  flex-grow: 1;
  border: none;
  background: none;
  outline: none;
  color: inherit;
  padding: 0;
  box-sizing: border-box;
  box-shadow: none;
  contain: none;
  min-width: 2px;
  height: var(--cd-size-3);

  &::placeholder {
    color: inherit;
    opacity: 0.6;
  }

  &::selection {
    background-color: var(--cd-primary-color);
    color: var(--cd-inverted-font-color);
  }
}

:host(.disabled) {
  pointer-events: none;
  opacity: 0.5;

  input {
    pointer-events: none;
  }
}
